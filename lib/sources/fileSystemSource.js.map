{"version":3,"sources":["sources/fileSystemSource.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEqB,gB;;;AAEnB,4BAAY,IAAZ,EAAkB;AAAA;;AAAA;;AAGhB,QAAI,gBAAgB,KAApB;;AAEA,QAAI;AACF,sBAAgB,CAAC,CAAC,aAAG,QAAH,CAAY,IAAZ,CAAlB;AACD,KAFD,CAEE,OAAO,GAAP,EAAY,CAAE;;AAEhB,QAAI,CAAC,IAAD,IAAS,CAAC,aAAd,EAA6B;AAC3B,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN;AACD;;AAED,UAAK,aAAL,GAAqB,4BAAU,aAAG,QAAb,CAArB;AACA,UAAK,KAAL,GAAa,IAAb;AAdgB;AAejB;;;;;;;;;;;;;;;;iDAOQ,KAAK,aAAL,CAAmB,KAAK,KAAxB,C;;;;;;;;;;;;;;;;;;;;kBAxBU,gB","file":"sources/fileSystemSource.js","sourcesContent":["import Source from './source';\nimport fs from 'fs';\nimport promisify from 'es6-promisify';\n\nexport default class FileSystemSource extends Source {\n\n  constructor(path) {\n    super();\n\n    let doesPathExist = false;\n\n    try {\n      doesPathExist = !!fs.statSync(path);\n    } catch (err) {}\n\n    if (!path || !doesPathExist) {\n      throw new Error('file path required');\n    }\n\n    this.readFileAsync = promisify(fs.readFile);\n    this._path = path;\n  }\n\n  /**\n   * Get file system assets\n   * @return {Buffer}\n   */\n  async getAssets() {\n    return this.readFileAsync(this._path);\n  }\n}"],"sourceRoot":"/source/"}