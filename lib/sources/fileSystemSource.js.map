{"version":3,"sources":["sources/fileSystemSource.js"],"names":[],"mappings":";;;;;;AAAA;;;;AACA;;;;;;;;AAEe,MAAM,gBAAN,0BAAsC;;AAEnD,cAAY,IAAZ,EAAkB;AAChB,YADgB;;AAIhB,QAAI,aAAJ,CAJgB;;AAMhB,QAAI;AACF,mBAAG,UAAH,CAAc,IAAd,EADE;AAEF,sBAAgB,IAAhB,CAFE;KAAJ,CAGE,OAAO,GAAP,EAAY;AACZ,sBAAgB,KAAhB,CADY;KAAZ;;AAIF,QAAI,CAAC,IAAD,IAAS,CAAC,aAAD,EAAgB;AAC3B,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN,CAD2B;KAA7B;;AAIA,SAAK,KAAL,GAAa,IAAb,CAjBgB;GAAlB;;;;;;AAFmD,WA0BnD,GAAkB;;;;AAChB,aAAO,MAAM,aAAG,gBAAH,CAAoB,MAAK,KAAL,CAA1B;SADS;GAAlB;CA1Ba;kBAAM","file":"sources/fileSystemSource.js","sourcesContent":["import Source from './source';\nimport fs from 'fs';\n\nexport default class FileSystemSource extends Source {\n\n  constructor(path) {\n    super();\n\n\n    let doesPathExist;\n\n    try {\n      fs.accessSync(path);\n      doesPathExist = true;\n    } catch (err) {\n      doesPathExist = false;\n    }\n\n    if (!path || !doesPathExist) {\n      throw new Error('file path required');\n    }\n\n    this._path = path;\n  }\n\n  /**\n   * Get file system assets\n   * @return {Stream}\n   */\n  async getAssets() {\n    return await fs.createReadStream(this._path);\n  }\n}"],"sourceRoot":"/source/"}