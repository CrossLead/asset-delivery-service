{"version":3,"sources":["sources/fileSystemSource.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEqB,gB;;;AAEnB,8BAAc;AAAA;;AAAA;;AAGZ,UAAK,WAAL,GAAmB,EAAnB;AACA,UAAK,aAAL,GAAqB,4BAAU,aAAG,QAAb,CAArB;AAJY;AAKb;;;;;;;;;;8BAMS,I,EAAM;AACd,aAAO,aAAG,YAAH,CAAgB,IAAhB,CAAP;AACD;;;;;;;;8BAKU,I,EAAK;AACd,UAAI,gBAAgB,KAApB;;AAEA,UAAI;AACF,wBAAgB,CAAC,CAAC,aAAG,QAAH,CAAY,IAAZ,CAAlB;;AAEA,YAAG,aAAH,EAAiB;AACf,cAAM,cAAc,KAAK,KAAL,CAAW,GAAX,CAApB;;AAEA,iBAAO,KAAK,WAAL,CAAiB,YAAY,YAAY,MAAZ,GAAqB,CAAjC,CAAjB,IAAwD,KAAK,SAAL,CAAe,IAAf,CAA/D;AACD,SAJD,MAKI;AACF,gBAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;AACF,OAXD,CAWE,OAAO,GAAP,EAAY;AACZ,cAAM,IAAI,KAAJ,CAAU,GAAV,CAAN;AACD;AACD;;;;;kBArCiB,gB","file":"sources/fileSystemSource.js","sourcesContent":["import Source from './source';\nimport fs from 'fs';\nimport promisify from 'es6-promisify';\n\nexport default class FileSystemSource extends Source {\n\n  constructor() {\n    super();\n\n    this._assetArray = [];\n    this.readFileAsync = promisify(fs.readFile);\n  }\n\n  /**\n   * Get file system assets\n   * @return {Buffer}\n   */\n  getAssets(path) {\n    return fs.readFileSync(path);\n  }\n\n  /**\n   * Add file system assets\n   */\n   addAssets(path){\n    let doesPathExist = false;\n\n    try {\n      doesPathExist = !!fs.statSync(path);\n\n      if(doesPathExist){\n        const filePathArr = path.split('/');\n\n        return this._assetArray[filePathArr[filePathArr.length - 1]] = this.getAssets(path);\n      }\n      else{\n        throw new Error('file path was not found');\n      }\n    } catch (err) {\n      throw new Error(err);\n    }\n   }\n}"],"sourceRoot":"/source/"}