{"version":3,"sources":["sources/fileSystemSource.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;;;IAEqB;;;AAEnB,WAFmB,gBAEnB,CAAY,IAAZ,EAAkB;wCAFC,kBAED;;6FAFC,8BAED;;AAGhB,QAAI,gBAAgB,KAAhB,CAHY;;AAKhB,QAAI;AACF,sBAAgB,CAAC,CAAC,aAAG,QAAH,CAAY,IAAZ,CAAD,CADf;KAAJ,CAEE,OAAO,GAAP,EAAY,EAAZ;;AAEF,QAAI,CAAC,IAAD,IAAS,CAAC,aAAD,EAAgB;AAC3B,YAAM,IAAI,KAAJ,CAAU,oBAAV,CAAN,CAD2B;KAA7B;;AAIA,UAAK,KAAL,GAAa,IAAb,CAbgB;;GAAlB;;;;;;;;6BAFmB;;;;;;;;;uBAuBJ,aAAG,gBAAH,CAAoB,KAAK,KAAL;;;;;;;;;;;;;;;;;;;;SAvBhB","file":"sources/fileSystemSource.js","sourcesContent":["import Source from './source';\nimport fs from 'fs';\n\nexport default class FileSystemSource extends Source {\n\n  constructor(path) {\n    super();\n\n    let doesPathExist = false;\n\n    try {\n      doesPathExist = !!fs.statSync(path);\n    } catch (err) {}\n\n    if (!path || !doesPathExist) {\n      throw new Error('file path required');\n    }\n\n    this._path = path;\n  }\n\n  /**\n   * Get file system assets\n   * @return {Stream}\n   */\n  async getAssets() {\n    return await fs.createReadStream(this._path);\n  }\n}"],"sourceRoot":"/source/"}