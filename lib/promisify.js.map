{"version":3,"sources":["promisify.js"],"names":[],"mappings":";;;;;;;;;;kBACe,UAAU,QAAV,EAAoB,QAApB,EAA8B;AAC3C,SAAO,YAAmB;AAAA,sCAAN,IAAM;AAAN,UAAM;AAAA;;AACxB,QAAM,oBAAoB,YAAY,SAAS,SAA/C;;AAEA,QAAI,eAAe,SAAnB;AACA,QAAI,YAAY,SAAS,OAAzB,EAAkC;AAChC,qBAAe,SAAS,OAAxB;AACD,KAFD,MAEO,IAAI,QAAJ,EAAc;AACnB,qBAAe,QAAf;AACD;;AAED,WAAO,sBAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,WAAK,IAAL,CAAU,UAAC,GAAD,EAAkB;AAAA,2CAAT,IAAS;AAAT,cAAS;AAAA;;AAC1B,YAAI,GAAJ,EAAS;AACP,iBAAO,OAAO,GAAP,CAAP;AACD;;AAED,YAAI,CAAC,iBAAL,EAAwB;AACtB,iBAAO,QAAQ,KAAK,CAAL,CAAR,CAAP;AACD;;AAED,gBAAQ,IAAR;AACD,OAVD;;AAYA,eAAS,KAAT,CAAe,YAAf,EAA6B,IAA7B;AACD,KAdM,CAAP;AAeD,GAzBD;AA0BD,C","file":"promisify.js","sourcesContent":["\nexport default function (original, settings) {\n  return function (...args) {\n    const multipleArguments = settings && settings.multiArgs;\n\n    let _promisified = undefined;\n    if (settings && settings.thisArg) {\n      _promisified = settings.thisArg;\n    } else if (settings) {\n      _promisified = settings;\n    }\n\n    return new Promise((resolve, reject) => {\n      args.push((err, ...args) => {\n        if (err) {\n          return reject(err);\n        };\n\n        if (!multipleArguments) {\n          return resolve(args[0])\n        }\n\n        resolve(args);\n      });\n\n      original.apply(_promisified, args);\n    });\n  }\n}\n"],"sourceRoot":"/source/"}